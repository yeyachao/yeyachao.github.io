<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hello World（摘抄意林）</title>
    <url>/2023/06/01/my/</url>
    <content><![CDATA[<p>看完《强风吹拂》这部动漫，不禁想到了经典动漫《起风了》里面的台词：</p>
<p><strong>“纵有疾风起，人生不言弃”</strong></p>
<p>《强风吹拂》向我们传达的也是一种突破自我的坚持</p>
<p>箱根驿传一路崎岖坎坷，这何尝不是人生之路的真实写照呢？</p>
<p>其实我们的人生并不是在平坦的赛道上前行，从升学毕业到结婚成家</p>
<p>每一个人生转折点就如箱根驿传上的一个接力点，下一段也许会更加坚信</p>
<span id="more"></span>
<p>但这一路有幸与亲人朋友们相互支持、相互鼓舞，我们便可强大到去战胜面前的困难，亦可战胜自己内心的胆怯</p>
<p>在人生的道路上迎难而上，步履不停地去追求心中的目标!</p>
]]></content>
  </entry>
  <entry>
    <title>面试题总结</title>
    <url>/2023/06/26/%E9%9D%A2%E8%AF%95%E9%A2%98%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>JavaScript，ES6知识点总结</p>
<h1 id="JavaScript-amp-amp-ES6"><a href="#JavaScript-amp-amp-ES6" class="headerlink" title="JavaScript&amp;&amp;ES6"></a>JavaScript&amp;&amp;ES6</h1><h3 id="js的数据类型及其存储方式"><a href="#js的数据类型及其存储方式" class="headerlink" title="js的数据类型及其存储方式"></a>js的数据类型及其存储方式</h3><ul>
<li><p><strong>基本数据类型</strong>：Number，String，Boolean，Null，Undefined，Symbol</p>
</li>
<li><p><strong>引用数据类型</strong>：Object，Array，Function，Date等等…</p>
</li>
<li><p><strong>存储方式</strong>：基本数据类型存储的是值，存在栈中，数据无法修改,可以比较(比较的是值)。引用类型存储的引用，存在堆中，数据可以修改，不能比较(比较的是地址)</p>
</li>
<li><p>false类型的数据：false、0、” “、undefined、null、NaN</p>
</li>
<li><p>数据转换成数字0的情况:’’(空字符串),’ ‘(空格字符串),’0’,false,null,[ ]</p>
<span id="more"></span></li>
<li><p>栈：先进后出，每一个值占内存一个单元，存储空间是内存自动分配的</p>
</li>
<li><p>堆：程序员动态分配存储位置，没有顺序</p>
</li>
</ul>
<h3 id="逻辑运算符-amp-amp-、-、"><a href="#逻辑运算符-amp-amp-、-、" class="headerlink" title="逻辑运算符 &amp;&amp;、||、!"></a>逻辑运算符 &amp;&amp;、||、!</h3><ul>
<li>&amp;&amp;与：两个条件都为真，结果才是真，第一个为假，则不会继续执行，直接返回假</li>
<li>||或：两个条件有一个为真时，结果为真，第一个为真，则不会继续执行，直接返回真，</li>
<li>! 非：表示反取操作，将真变为假，将假变为真</li>
</ul>
<h3 id="js数据类型转换"><a href="#js数据类型转换" class="headerlink" title="js数据类型转换"></a>js数据类型转换</h3><ul>
<li><p>隐式数据类型转换：</p>
<ul>
<li><p>数字和字串符相加的时候，会将数字转成字符串类型，然后再尾部拼接</p>
</li>
<li><p>数字和字符串减、乘、除的时候，会将数字字串符转成数字类型，然后再进行运算，如果字符串为非纯数字，因此无法完全解析为数字，减、乘、除数字结果为NaN</p>
</li>
</ul>
</li>
<li><p>显示类型转换：</p>
<ul>
<li><p>字符串转换：String() 、toString() </p>
</li>
<li><p>转换成数字：Number()、parseInt() 和 parseFloat() </p>
</li>
<li><p>转换成布尔值：Boolean()</p>
</li>
</ul>
</li>
</ul>
<h3 id="js判断数据类型"><a href="#js判断数据类型" class="headerlink" title="js判断数据类型"></a>js判断数据类型</h3><p><strong>typeof</strong>、<strong>instanceof</strong>、<strong>constructor</strong>、Object.prototype.toString.call()</p>
<ul>
<li><strong>typeof</strong>：是一个操作符，返回一个表达式的数据类型，例如<code>typeof 123</code>返回<code>&quot;number&quot;</code>。</li>
<li><strong>instanceof</strong>：是用来判断一个值是否为某个对象的实例，例如<code>[1, 2, 3] instanceof Array</code>返回<code>true</code>。</li>
<li><strong>constructor</strong>：是一个属性，返回一个值的构造函数的引用，例如<code>(123).constructor === Number</code>返回<code>true</code>。</li>
<li>Object.prototype.toString.call()：是一个方法，返回一个值的内部属性，例如<code>Object.prototype.toString.call(&quot;123&quot;)</code>返回<code>&quot;[object String]&quot;</code>。</li>
</ul>
<h3 id="null-和-undefined-的区别"><a href="#null-和-undefined-的区别" class="headerlink" title="null 和 undefined 的区别"></a>null 和 undefined 的区别</h3><ul>
<li>null 是一个字面量，表示一个空对象的引用，而 undefined 是一个全局变量，表示一个未初始化的值</li>
<li>null 是一个对象类型，而 undefined 是一个未定义类型</li>
<li>null 在数字运算中被转换为 0，而 undefined 被转换为 NaN</li>
<li>null 和 undefined 在相等运算符（==）下相等，但在全等运算符（===）下不相等</li>
<li>null 是对象原型链的终点</li>
</ul>
<h3 id="js的作用域和作用域链"><a href="#js的作用域和作用域链" class="headerlink" title="js的作用域和作用域链"></a>js的作用域和作用域链</h3><p>JavaScript 的作用域是指代码中定义变量的区域，它决定了变量的可见性和生命周期。JS作用域主要包括全局作用域、局部作用域和ES6的块级作用域</p>
<ul>
<li><strong>全局作用域</strong>：在代码的任何地方都可以访问的变量，例如<code>window</code>对象或者声明在外层函数之外的变量。</li>
<li><strong>局部作用域</strong>：在函数内部定义的变量,是局部变量，只能在函数内部使用</li>
<li><strong>块级作用域</strong>：一对大括号就可以看成是一块，在这块区域中定义的变量，只能在这个区域中使用，但是在js中在这个块级作用域中定义的变量，外面也能使用。</li>
</ul>
<p>JavaScript 的作用域链是指在查找变量时，沿着嵌套的作用域逐级向上搜索的路径。JavaScript 引擎遵循以下规则来解析变量：</p>
<ul>
<li><strong>先从当前作用域开始查找</strong>：如果当前作用域有该变量，就直接使用它；如果没有，就继续下一步。</li>
<li><strong>再从上一级作用域查找</strong>：如果上一级作用域有该变量，就使用它；如果没有，就继续下一步。</li>
<li><strong>重复上述步骤，直到全局作用域</strong>：如果全局作用域有该变量，就使用它；如果没有，就抛出一个引用错误</li>
</ul>
<h3 id="js创建对象的几种方式"><a href="#js创建对象的几种方式" class="headerlink" title="js创建对象的几种方式"></a>js创建对象的几种方式</h3><ul>
<li><p>工厂模式：工厂模式是用函数来封装创建对象的细节，在函数里面创建对象并返回对象</p>
</li>
<li><p>构造函数模式：使用一个自定义的函数作为构造函数，然后用 new 关键字创建一个新对象</p>
</li>
<li><p>原型模式：使用一个对象作为另一个对象的原型，然后用 Object.create() 方法创建一个新对象，这样可以实现继承和共享属性和方法</p>
</li>
<li><p>组合使用构造函数模式和原型模式：使用构造函数模式和原型模式的组合，构造函数用于定义实例属性，原型用于定义共享的属性和方法。 </p>
<p>* 不成文的规定</p>
<p>如果函数名以大写字母开头 我们认为它是一个构造函数 配合new关键字使用</p>
<p>如果函数名是小写字母开头 我们认为它是一个普通函数 直接调用即可</p>
<p>this关键字两种场景: </p>
<p>1、构造函数中使用代表的是当前实例化对象 谁new了我 我就指向谁</p>
<p>2、全局环境中 this指向window 如果我们在全局中调用了函数 那么函数中的this就是指向window 谁调用我 我就指向谁</p>
</li>
</ul>
<h3 id="箭头函数和普通函数的区别"><a href="#箭头函数和普通函数的区别" class="headerlink" title="箭头函数和普通函数的区别"></a>箭头函数和普通函数的区别</h3><ul>
<li>箭头函数中的this指向的是定义时的this，而不是执行时的this，普通函数的this，谁调用就指向谁，没有调用者，就指向全局对象，</li>
<li>箭头函数没有自己的this，继承父类的this，不能作为构造函数使用，call，apply，bind，不能改变箭头函数的this指向，没有自己的arguments，没有prototype</li>
</ul>
<h3 id="js实现继承的几种方式"><a href="#js实现继承的几种方式" class="headerlink" title="js实现继承的几种方式"></a>js实现继承的几种方式</h3><p>ES5实现继承主要是基于prototype来实现的，具体有三种方法<br>原型链继承：即 B.prototype=new A()<br>借用构造函数继承：(call或者apply的方式继承)</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Cat2</span>(<span class="params">name</span>) &#123;</span><br><span class="line">    <span class="title class_">Animal</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name || <span class="string">&#x27;Tom&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Test Code</span></span><br><span class="line"><span class="keyword">var</span> cat2 = <span class="keyword">new</span> <span class="title class_">Cat2</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(cat2.<span class="property">name</span>); <span class="comment">//Tom</span></span><br></pre></td></tr></table></figure></div>

<p>组合继承：组合继承是结合第一种和第二种方式</p>
<p>ES6继承是目前比较新，并且主流的继承方式，用class定义类，用extends继承类，用super()表示<br>父类</p>
<h3 id="call、apply、bind的区别"><a href="#call、apply、bind的区别" class="headerlink" title="call、apply、bind的区别"></a>call、apply、bind的区别</h3><ul>
<li><strong>call</strong>：接收一个指定的 this 值和若干个参数，然后调用函数，返回函数的执行结果。</li>
<li><strong>apply</strong>：接收一个指定的 this 值和一个数组或类数组对象作为参数，然后调用函数，返回函数的执行结果。</li>
<li><strong>bind</strong>：接收一个指定的 this 值和若干个参数，然后返回一个新的函数，新的函数在调用时会使用指定的 this 值和参数。</li>
</ul>
<p>三者函数的作用都是用来改变this指向的，区别在于语法的不同。</p>
<p>apply和call的区别是 call方法接收的是若干个参数列表，而apply接收的是一个包含多个参数的数组，而bind方法时创建一个新的函数，当被调用时，将其this关键字设置为提供的值，在调用新函数时，在任何提供之前提供一个给定的参数序列</p>
<h3 id="说一下JS原生常用dom操作方法？"><a href="#说一下JS原生常用dom操作方法？" class="headerlink" title="说一下JS原生常用dom操作方法？"></a>说一下JS原生常用dom操作方法？</h3><ul>
<li><p>js原生dom操作方法有</p>
<ul>
<li>​    查找：<ul>
<li>​        getElementByid,</li>
<li>​        getElementsByTagName,</li>
<li>​        querySelector,</li>
<li>​        querySelectorAll</li>
</ul>
</li>
<li>​    插入：<ul>
<li>​        appendChild,insertBefore</li>
</ul>
</li>
<li>​    删除：<ul>
<li>​        removeChild</li>
</ul>
</li>
<li>​    克隆：<ul>
<li>​        cloneNode</li>
</ul>
</li>
<li>​    设置和获取属性：<ul>
<li>​        setAttribute(“属性名”,”值”)</li>
<li>​        getAttibute(“属性名”)</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="什么是JavaScript原型，原型链-有什么特点？"><a href="#什么是JavaScript原型，原型链-有什么特点？" class="headerlink" title="什么是JavaScript原型，原型链 ? 有什么特点？"></a>什么是JavaScript原型，原型链 ? 有什么特点？</h3><ul>
<li><strong>原型</strong>：JavaScript中的每个函数都有一个 prototype 属性，这个属性指向一个对象，这个对象就是函数的原型对象。原型对象包含了函数的共享属性和方法，可以被函数的所有实例继承。</li>
<li><strong>原型链</strong>：JavaScript中的每个对象都有一个 <code>__proto__</code> 属性，这个属性指向对象的原型，也就是构造函数的 prototype 属性。通过 <code>__proto__</code>  属性，对象可以访问到原型上的属性和方法。原型对象也有自己的<code>__proto__</code> 属性，指向更上一层的原型，这样就形成了一个链式结构，称为原型链。原型链的终点是 Object.prototype ，它的<code>__proto__</code> 属性指向 null 。</li>
<li>特点：</li>
<li>JavaScript 对象是通过引用来传递的，我们创建的每个新对象实体中并没有一份属于自己的原型副本。当我们修改原型时，与之相关的对象也会继承这一改变，当我们需要一个属性的时， Javascript 引擎会先看当前对象中是否有这个属性， 如果没有的就会查找他的Prototype 对象是否有这个属性，如此递推下去，一直检索到Object 内建对象</li>
</ul>
<h3 id="构造函数-实例对象-原型三者之间的关系"><a href="#构造函数-实例对象-原型三者之间的关系" class="headerlink" title="构造函数 实例对象 原型三者之间的关系"></a>构造函数 实例对象 原型三者之间的关系</h3><p>构造函数通过原型创建实例对象，实例对象通过原型链与原型建立关联，并可以共享原型上的属性和方法。</p>
<ul>
<li><p>首先，<strong>构造函数</strong>有一个<strong>prototype属性</strong>指向它的prototype原型对象；</p>
</li>
<li><p>所有<strong>原型对象</strong>都会自动获得一个 <strong>constructor</strong>（构造函数）属性，这个属性包含一个指向 prototype 属性所在函数的指针，即指向构造函数；</p>
</li>
<li><p>由构造函数new出来的<strong>实例对象</strong>，实例对象上有一个<code>__proto__</code>指向构造函数中的prototype原型对象。</p>
</li>
<li><p>两个方法：</p>
<ul>
<li>isPrototypeOf()：是 Object.prototype 的一个实例方法，用于判断当前对象是否为另一个对象的原型。接受对象作为参数，返回值为Boolean，如果参数不是对象，会被强制转成对象，参数为null或undefined则返回false</li>
<li>Object.getPrototypeOf()：是 Object 函数（类）的一个静态方法，用于获取指定对象的原型对象（即内部 [[Prototype]] 属性的值）。它接受一个对象作为参数，返回该对象的原型对象，可能是 null 。如果参数不是对象，它会被强制转换为对象。如果参数是 null 或 undefined ，它会抛出 TypeError 异常</li>
</ul>
</li>
</ul>
<h3 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h3><ul>
<li><p>闭包是指在一个函数内部创建的函数，它可以访问和操作外部函数的变量和参数，即使外部函数已经执行完毕，闭包仍然可以保持对这些变量的引用。</p>
</li>
<li><p><strong>好处</strong>：闭包有以下几个好处：</p>
<ul>
<li>保护函数内部的变量，实现变量的私有化和安全性。</li>
<li>保存函数内部的变量，保持上一次的状态，实现一些计数器、缓存、记忆等功能。</li>
<li>可以延长作用域，使其在函数可以在外部被访问和使用</li>
</ul>
</li>
<li><p><strong>缺点</strong>：闭包有以下几个缺点：</p>
<ul>
<li>常驻内存，增加内存消耗，导致内存泄漏。</li>
<li>增加代码的复杂度和理解难度，可能导致逻辑混乱。</li>
<li>命名冲突或污染全局作用域。</li>
</ul>
</li>
<li><p>在不需要使用闭包时将其赋值为 null ，让垃圾回收机制回收它，解决内存泄露</p>
</li>
</ul>
<h3 id="js作用域"><a href="#js作用域" class="headerlink" title="js作用域"></a>js作用域</h3><p>JS作用域也就是JS识别变量的范围，作用域链也就是JS查找变量的顺序</p>
<ul>
<li><p>​    先说作用域，JS作用域主要包括全局作用域、局部作用域和ES6的块级作用域</p>
<ul>
<li>全局作用域：也就是定义在window下的变量范围，在任何地方都可以访问，</li>
<li>局部作用域：是只在函数内部定义的变量范围</li>
<li>块级作用域：简单来说用let和const在任意的代码块中定义的变量都认为是块级作用域中的变量，例如在for循环中用let定义的变量，在if语句中用let定义的变量等等</li>
</ul>
<p>注: 1. 尽量不要使用全局变量，因为容易导致全局的污染，命名冲突，对bug查找不利。</p>
<p>​      2. 而所谓的作用域链就是由最内部的作用域往最外部,查找变量的过程.形成的链条就是作用域链</p>
</li>
</ul>
<h3 id="数组方法"><a href="#数组方法" class="headerlink" title="数组方法"></a>数组方法</h3><ul>
<li><p><strong>不改变原数组的方法</strong>：这些方法不会修改原数组，而是返回一个新的数组或其他值。例如：</p>
<ul>
<li>concat()：用于连接两个或多个数组，返回一个新的数组。</li>
<li>join()：用于将数组中的所有元素转换为字符串，并连接成一个字符串，返回该字符串。</li>
<li>slice()：用于从数组中截取一部分元素，返回一个新的数组。</li>
<li>indexOf()：用于查找数组中指定元素的第一个索引，如果不存在，返回-1。</li>
<li>lastIndexOf()：用于查找数组中指定元素的最后一个索引，如果不存在，返回-1。</li>
<li>includes()：用于判断数组中是否包含指定元素，返回布尔值。</li>
<li>find()：用于查找数组中满足条件的第一个元素，返回该元素，如果没有找到，返回undefined。</li>
<li>findIndex()：用于查找数组中满足条件的第一个元素的索引，返回该索引，如果没有找到，返回-1。</li>
<li>filter()：用于过滤数组中满足条件的所有元素，返回一个新的数组。</li>
<li>map()：用于对数组中的每个元素进行操作，并返回一个新的数组。</li>
<li>forEach()：用于遍历数组中的每个元素，并执行回调函数，没有返回值。</li>
<li>reduce()：用于对数组中的每个元素进行累积操作，并返回最终结果。</li>
<li>some()：用于判断数组中是否有至少一个元素满足条件，返回布尔值。</li>
<li>every()：用于判断数组中是否所有元素都满足条件，返回布尔值。</li>
</ul>
</li>
<li><p><strong>改变原数组的方法</strong>：这些方法会修改原数组，并可能返回一些值。例如：</p>
<ul>
<li>push()：用于向数组末尾添加一个或多个元素，并返回新的长度。</li>
<li>pop()：用于删除数组末尾的一个元素，并返回该元素。</li>
<li>unshift()：用于向数组开头添加一个或多个元素，并返回新的长度。</li>
<li>shift()：用于删除数组开头的一个元素，并返回该元素。</li>
<li>splice()：用于在指定位置插入、删除或替换若干个元素，并返回被删除的元素组成的数组。</li>
<li>reverse()：用于反转数组中的元素顺序，并返回原数组。</li>
<li>sort()：用于对数组中的元素进行排序，并返回原数组。</li>
<li>fill()：用于将数组中指定范围内的所有元素填充为同一个值，并返回原数组。</li>
<li>copyWithin()：用于将数组中指定范围内的一段元素复制到另一段位置，并覆盖原有元素，并返回原数组。</li>
</ul>
</li>
</ul>
<h3 id="字符串方法"><a href="#字符串方法" class="headerlink" title="字符串方法"></a>字符串方法</h3><ul>
<li><strong>不改变原字符串的方法</strong>：这些方法不会修改原字符串，而是返回一个新的字符串或其他值。例如：<ul>
<li>charAt(x)：用于返回字符串中指定位置的字符，位置从0开始计算。</li>
<li>charCodeAt(x)：用于返回字符串中指定位置的字符的Unicode编码值。</li>
<li>indexOf(s)：用于查找字符串中指定子串s的第一个出现的位置，如果不存在，返回-1。</li>
<li>lastIndexOf(s)：用于查找字符串中指定子串s的最后一个出现的位置，如果不存在，返回-1。</li>
<li>includes(s)：用于判断字符串中是否包含指定子串s，返回布尔值。</li>
<li>startsWith(s)：用于判断字符串是否以指定子串s开头，返回布尔值。</li>
<li>endsWith(s)：用于判断字符串是否以指定子串s结尾，返回布尔值。</li>
<li>slice(x, y)：用于从字符串中截取从位置x到位置y（不包括y）之间的子串，返回该子串。</li>
<li>substring(x, y)：用于从字符串中截取从位置x到位置y（不包括y）之间的子串，如果x大于y，会自动交换位置，返回该子串。</li>
<li>substr(x, n)：用于从字符串中截取从位置x开始的n个字符，返回该子串。</li>
<li>split(s)：用于将字符串按照指定分隔符s分割成若干个子串，并返回一个数组。</li>
<li>match：用于将字符串与一个正则表达式r进行匹配，并返回一个数组，包含匹配结果和捕获组。</li>
<li>search：用于将字符串与一个正则表达式r进行匹配，并返回第一个匹配结果的位置，如果没有匹配，返回-1。</li>
<li>replace(r, s)：用于将字符串中与一个正则表达式r或者一个子串匹配的部分替换为另一个子串s，并返回替换后的新字符串。</li>
<li>repeat(n)：用于将字符串重复n次，并返回重复后的新字符串。</li>
<li>toLowerCase()：用于将字符串中的所有大写字母转换为小写字母，并返回转换后的新字符串。</li>
<li>toUpperCase()：用于将字符串中的所有小写字母转换为大写字母，并返回转换后的新字符串。</li>
<li>trim()：用于去除字符串两端的空白字符，并返回去除后的新字符串。</li>
</ul>
</li>
<li><strong>改变原字符串的方法</strong>：这些方法会修改原字符串，并可能返回一些值。例如：<ul>
<li>concat(s1, s2, …)：用于连接两个或多个字符串，并返回连接后的新字符串。注意，这个方法不会改变原始变量所指向的内存地址，而是创建了一个新的内存地址来存储连接后的新字符串。因此，在使用这个方法时，需要重新赋值给原始变量才能更新原始变量的值。</li>
</ul>
</li>
</ul>
<h3 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h3><ul>
<li>什么时候跨域? 介绍同源策略<ul>
<li>什么时候跨域：协议，域名，端口号有一个不一致就会跨域</li>
<li>同源策略：所谓的同源策略其实是浏览器的一种机制，只允许在同源，也就是同协议、同域名、同端口的的情况下才能进行数据交互。</li>
</ul>
</li>
<li>跨域的方式有哪几种?<ul>
<li>JSONP</li>
</ul>
<ul>
<li>iframe</li>
<li>cors 解决跨域</li>
<li>proxy 代理（常用）</li>
<li>Nginx 反向代理（公司常用）</li>
</ul>
</li>
</ul>
<h3 id="jsonp的原理"><a href="#jsonp的原理" class="headerlink" title="jsonp的原理"></a>jsonp的原理</h3><ul>
<li>动态创建script标签 利用script标签的src属性发起请求不受同源策略限制的特点 服务器会返回一段函数调用 前端要声明一个和该函数调用名字一样的函数 通过形参接收函数调用传过来的实参，只能发起get请求 </li>
</ul>
<h3 id="如何创建一个ajax"><a href="#如何创建一个ajax" class="headerlink" title="如何创建一个ajax"></a>如何创建一个ajax</h3><p>步骤：创建xhr对象 =&gt; 配置ajax请求地址 =&gt; 监听响应，接受响应 =&gt; 发送请求</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1、创建ajax核心对象</span></span><br><span class="line">    <span class="keyword">const</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>()</span><br><span class="line">    <span class="comment">// 2、设置请求的方法、URL 和是否异步</span></span><br><span class="line">    <span class="comment">//    - 参数1: 请求路径 常用的有: get(获取) post(提交) delete(删除) put(修改) patch(打补丁的修改)</span></span><br><span class="line">    <span class="comment">//    - 参数2: 请求路径 url</span></span><br><span class="line">    <span class="comment">//    - 参数3: boolean类型 默认为true 表示同步(false)或异步(true)</span></span><br><span class="line">    xhr.<span class="title function_">open</span>(<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;https://api.it120.cc/fyy/shop/goods/list&#x27;</span>, <span class="literal">true</span>)</span><br><span class="line">	<span class="comment">// 3、设置请求头</span></span><br><span class="line">	xhr.<span class="title function_">setRequestHeader</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;application/json&#x27;</span>); <span class="comment">// 设置请求头，指定请求的数据类型</span></span><br><span class="line">	<span class="comment">// 发起请求</span></span><br><span class="line">	xhr.<span class="title function_">send</span>();</span><br><span class="line">    <span class="comment">// 4、监听服务端响应</span></span><br><span class="line">	xhr.<span class="property">onload</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">		<span class="keyword">if</span> (xhr.<span class="property">status</span> === <span class="number">200</span>) &#123;</span><br><span class="line">			<span class="comment">// 请求成功</span></span><br><span class="line">			<span class="keyword">var</span> responseData = xhr.<span class="property">responseText</span>; <span class="comment">// 获取响应内容</span></span><br><span class="line">			<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">JSON</span>.<span class="title function_">parse</span>(responseData)); </span><br><span class="line">             <span class="comment">// JSON.parse: 反序列化 将满足JSON格式的字符串转成对象</span></span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Error: &#x27;</span> + xhr.<span class="property">status</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h3 id="ajax的通信原理是什么或者axios的原理是什么"><a href="#ajax的通信原理是什么或者axios的原理是什么" class="headerlink" title="ajax的通信原理是什么或者axios的原理是什么?"></a>ajax的通信原理是什么或者axios的原理是什么?</h3><ul>
<li>ajax的通信原理是通过<strong>XmlHttpRequest对象</strong>来向服务器发送<strong>异步请求</strong>，从服务器获得数据，然后用<strong>JavaScript</strong>来操作<strong>DOM</strong>而更新页面。<ul>
<li>创建一个XmlHttpRequest对象，这个对象是ajax的核心，它提供了一系列的方法和属性来实现异步通信。</li>
<li>调用XmlHttpRequest对象的open()方法，设置请求的URL，方法（GET或POST），是否异步（true或false），以及可选的回调函数。</li>
<li>调用XmlHttpRequest对象的send()方法，发送请求，如果是POST方法，还需要设置请求头和请求体。</li>
<li>监听XmlHttpRequest对象的readyState属性和status属性，当readyState为4且status为200时，表示请求成功完成。</li>
<li>获取XmlHttpRequest对象的responseText或responseXML属性，根据返回的数据格式（文本或XML），进行解析和处理。</li>
<li>使用JavaScript来操作DOM，根据返回的数据动态地更新页面内容。</li>
</ul>
</li>
</ul>
<ul>
<li><p>axios的原理是基于<strong>promise</strong>对<strong>ajax</strong>进行了封装，使得它能够支持更多的功能和灵活性。</p>
<ul>
<li>axios对外暴露了一个axios实例，这个实例有一个Axios方法，这个方法是用来发送请求的核心。</li>
<li>Axios方法有一个interceptors对象，这个对象有request和response两个属性，分别用来管理请求拦截器和响应拦截器。</li>
<li>当我们调用axios.interceptors.request.use()或axios.interceptors.response.use()时，就会在对应的拦截器数组中添加一个成功回调和一个失败回调。</li>
<li>当我们调用axios或axios.get或axios.post等方法时，就会创建一个Promise对象，并将请求配置作为参数传入。</li>
<li>这个Promise对象会根据请求配置创建一个chain数组，这个数组存储了所有的回调函数，包括拦截器的回调和dispatchRequest的回调。</li>
<li>dispatchRequest是用来执行实际的请求的函数，它会根据不同的环境调用不同的适配器（adapter），例如在浏览器中调用XMLHttpRequest，在node.js中调用http模块。</li>
<li>适配器会对请求和响应进行处理，包括设置请求头，发送请求体，解析响应数据等，并返回一个响应对象（response）。</li>
<li>响应对象会被传递给chain数组中的下一个回调函数，直到所有的回调函数都执行完毕，最后返回一个最终的Promise对象。</li>
<li>我们可以在这个Promise对象上使用then或catch方法来处理响应数据或错误信息。</li>
</ul>
</li>
</ul>
<h3 id="arguments对象"><a href="#arguments对象" class="headerlink" title="arguments对象"></a>arguments对象</h3><p>arguments 对象是函数中传递的参数值的集合。它是一个类似数组的对象，因为它有一个 length 属性，我们可以使用数组索引表示法 arguments[1] 来访问单个值，但它没有数组中的内置方法，如：forEach、reduce、filter 和 map。</p>
<p>我们可以使用 Array.prototype.slice 将 arguments 对象转换成一个数组</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fn</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>箭头函数中没有arguments对象</p>
<h3 id="内存泄露"><a href="#内存泄露" class="headerlink" title="内存泄露"></a>内存泄露</h3><p>造成内存泄漏可能操作</p>
<ul>
<li>意外的全局变量</li>
<li>被遗忘的计时器或回调函数</li>
<li>脱离 DOM 的引用</li>
<li>闭包</li>
</ul>
<h3 id="ES6新特性"><a href="#ES6新特性" class="headerlink" title="ES6新特性"></a>ES6新特性</h3><ul>
<li>新增了块级作用域(let,const)</li>
<li>提供了定义类的语法糖(class)</li>
<li>新增了一种基本数据类型(Symbol)</li>
<li>新增了变量的解构赋值</li>
<li>新增了箭头函数</li>
<li>新增模板字符串</li>
<li>对象和数组新增了扩展运算符</li>
<li>ES6 新增了模块化(import/export)</li>
<li>ES6 新增了 Set 和 Map 数据结构</li>
<li>新增Promise，处理异步操作</li>
<li>ES6 新增了生成器(Generator)和迭代器(Iterator)</li>
</ul>
<h3 id="面向对象理解"><a href="#面向对象理解" class="headerlink" title="面向对象理解"></a>面向对象理解</h3><ul>
<li>面向对象是一种开发思想 它将复杂的过程简单化，让我们从开发者变成了指挥者 指挥对象做事情、在实际开发过程中，需要面对很多方法，方法与方法之间又没有联系，于是使用面向对象的思想对方法进行了对象的封装（不会这个）</li>
<li>面向对象编程的基本原则包括：封装、多态、抽象(一个事物在不同环境下的不同表现形式)</li>
</ul>
<h3 id="从输入URL到页面加载完中间发生了什么"><a href="#从输入URL到页面加载完中间发生了什么" class="headerlink" title="从输入URL到页面加载完中间发生了什么"></a>从输入URL到页面加载完中间发生了什么</h3><ul>
<li>输入完URL通过DNS解析找到这个地址对应的服务器地址(ip),通过TCP请求链接服务,通过WEB服务器(apache)返回数据,浏览器根据返回数据构建DOM树,通过css渲染引擎及js解析引擎将页面渲染出来,关闭tcp连接</li>
</ul>
<h3 id="ES6模块与CommonJS模块有什么区别？"><a href="#ES6模块与CommonJS模块有什么区别？" class="headerlink" title="ES6模块与CommonJS模块有什么区别？"></a>ES6模块与CommonJS模块有什么区别？</h3><ul>
<li>1、CommonJS 模块输出的是一个值的拷贝，ES6 模块输出的是值的引用。CommonJS 模块输出的是值的，也就是说，一旦输出一个值，模块内部的变化就影响不到这个值。ES6 模块的运行机制与 CommonJS 不一样。JS 引擎对脚本静态分析的时候，遇到模块加载命令 import，就会生成一个只读引用。等到脚本真正执行时，再根据这个只读引用，到被加载的那个模块里面去取值。</li>
<li>2、CommonJS 模块是运行时加载，ES6 模块是编译时输出接口。CommonJS 模块就是对象，即在输入时是先加载整个模块，生成一个对象，然后再从这个对象上面读取方法，这种加载称为“运行时加载”。而 ES6 模块不是对象，它的对外接口只是一种静态定义，在代码静态解析阶段就会生成。</li>
</ul>
<h3 id="DOM和BOM"><a href="#DOM和BOM" class="headerlink" title="DOM和BOM"></a>DOM和BOM</h3><ul>
<li>DOM 是针对文档的对象模型，用于表示和操作文档中的元素和内容；BOM 是浏览器的对象模型，用于操作浏览器窗口和浏览器本身的功能</li>
</ul>
<h3 id="深拷贝浅拷贝"><a href="#深拷贝浅拷贝" class="headerlink" title="深拷贝浅拷贝"></a>深拷贝浅拷贝</h3><ul>
<li><p>浅拷贝：浅拷贝会直接复制引用类型的地址值，新旧对象的地址值一样 都指向同一块内存空间(共享) 所以对新对象的操作会影响到旧对象</p>
</li>
<li><p>深拷贝：深拷贝是复制了对象本身，新旧对象有自己独立的内存空间 所以对新对象的操作不会影响到旧对象</p>
</li>
<li><p>可以实现浅拷贝的方法：Object.assign()，展开运算符(…) </p>
</li>
<li><p>可以实现深拷贝的方法：对象只有一层的时候使用Object.assign()，json.stringify和json.parse，直接使用Object.create()方法</p>
</li>
</ul>
<h3 id="解释-JavaScript-中“undefined”和“not-defined”之间的区别"><a href="#解释-JavaScript-中“undefined”和“not-defined”之间的区别" class="headerlink" title="解释 JavaScript 中“undefined”和“not defined”之间的区别"></a>解释 JavaScript 中“undefined”和“not defined”之间的区别</h3><ul>
<li><p>当我们访问一个被声明但未被定义的变量时，会出现 undefined 错误。</p>
</li>
<li><p>当我们引用一个既未声明也未定义的变量时，将会出现 not defined 错误。</p>
</li>
</ul>
<h3 id="匿名和命名函数有什么区别？"><a href="#匿名和命名函数有什么区别？" class="headerlink" title="匿名和命名函数有什么区别？"></a>匿名和命名函数有什么区别？</h3><ul>
<li><strong>函数名</strong>：匿名函数没有指定函数名，而命名函数有指定函数名</li>
<li><strong>调用方式</strong>：匿名函数不能直接调用，需要赋值给一个变量或者作为参数传递给其他函数，而命名函数可以直接通过函数名调用</li>
<li><strong>作用域</strong>：匿名函数可以创建一个独立的作用域，避免变量污染，而命名函数会在全局作用域或者所在的作用域中创建一个变量</li>
</ul>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 匿名函数</span></span><br><span class="line"><span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;这是一个匿名函数&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 命名函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;这是一个命名函数&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="json和jsonp的区别"><a href="#json和jsonp的区别" class="headerlink" title="json和jsonp的区别?"></a>json和jsonp的区别?</h3><ul>
<li>json返回的是一串json格式数据；而jsonp返回的是脚本代码（包含一个函数调用）</li>
<li>jsonp的全名叫做json with padding，就是把json对象用符合js语法的形式包裹起来以使其他的网站可以请求到，也就是将json封装成js文件传过去。</li>
</ul>
<h3 id="this指向"><a href="#this指向" class="headerlink" title="this指向"></a>this指向</h3><ul>
<li>在函数中，指向调用者</li>
</ul>
<ul>
<li>在事件中，指向触发事件的元素</li>
<li>在箭头函数中，上一层作用域的this指向</li>
<li>如果有new关键字this指向new出来的那个对象</li>
</ul>
<h3 id="cookie，sessionStoreage和localStorage"><a href="#cookie，sessionStoreage和localStorage" class="headerlink" title="cookie，sessionStoreage和localStorage"></a>cookie，sessionStoreage和localStorage</h3><ul>
<li>都用在客户端存储数据，每一个都有自己的存储和到期限制，</li>
<li>不同点：<ul>
<li><ul>
<li>存储大小：<ul>
<li>cookie数据大小不能大于4k</li>
<li>localStorage和sessionStorage则可以达到5M</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li>有效时间<ul>
<li>cookie在设置的有效期内一直有效</li>
<li>localStorage存储持久数据，只要不手动清除则一直存在</li>
<li>sessionStorage数据在当前浏览器关闭后就会被自动清除</li>
</ul>
</li>
<li>数据与服务器间的交互方式<ul>
<li>cookie的数据会自动传递到服务器端，服务器端的也可以写cookie到客户端</li>
<li>localStorage和sessionStorage不会把数据自动传到服务器端，仅在本地存储</li>
</ul>
</li>
</ul>
<h3 id="防抖和节流"><a href="#防抖和节流" class="headerlink" title="防抖和节流"></a>防抖和节流</h3><p>防抖：所有的触发都会被取消，最后一次执行在规定的时间后才会触发，也就是说，连续快速的触发多次，只有最后一次执行                  </p>
<p>节流：在规定的时候内不会重新触发回调，只有大于时间间隔才会触发回调，减少事件触发的频率</p>
<h3 id="事件传播"><a href="#事件传播" class="headerlink" title="事件传播"></a>事件传播</h3><ul>
<li><p>当事件发生在DOM元素上时，该事件并不完全发生在那个元素上。</p>
</li>
<li><p>事件传播有三个阶段：</p>
<ul>
<li>1、捕获阶段–事件从 window 开始，然后向下到每个元素，直到到达目标元素事件或event.target。</li>
<li>2、目标阶段–事件已达到目标元素。</li>
<li>3、冒泡阶段–事件从目标元素冒泡，然后上升到每个元素，直到到达 window。</li>
</ul>
</li>
</ul>
<h3 id="事件捕获"><a href="#事件捕获" class="headerlink" title="事件捕获"></a>事件捕获</h3><ul>
<li>在捕获阶段，事件从 window 开始，一直到触发事件的元素。<code>window----&gt; document----&gt; html----&gt; body \----&gt;目标元素</code></li>
</ul>
<h3 id="事件冒泡"><a href="#事件冒泡" class="headerlink" title="事件冒泡"></a>事件冒泡</h3><ul>
<li>事件冒泡刚好与事件捕获相反，当前元素—-&gt;body -—&gt; html—-&gt;document -—&gt;window。在冒泡阶段，事件冒泡，或者事件发生在它的父代，祖父母，祖父母的父代，直到到达 window 为止。</li>
</ul>
<h3 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h3><ul>
<li>事件委托是利用事件冒泡机制，在父元素上监听子元素的事件。通过将事件处理函数绑定到父元素上，可以实现对动态添加的子元素也能够触发相同的事件处理逻辑。当事件冒泡到父元素时，可以通过判断事件的目标元素（<code>event.target</code>）来确定具体是哪个子元素触发了事件。</li>
<li>优点：<ul>
<li>节省内存，避免了每个子元素都能绑定事件处理函数</li>
<li>动态添加的子元素也能够绑定事件，无需重新绑定事件处理函数</li>
</ul>
</li>
<li>综上所述，事件传播是指在DOM结构中的传递过程，包括事件捕获阶段、目标阶段和事件冒泡阶段，事件委托是一种利用事件冒泡机制，在父元素上监听子元素事件的技术</li>
</ul>
<h3 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h3><ul>
<li>递归调用：函数在其自身内部调用自身。<ul>
<li>在递归过程中，函数会反复调用自身，每次调用时都会解决一个规模较小的子问题，直到达到某个终止条件，然后逐层返回结果，最终得到整个问题的解。</li>
</ul>
</li>
<li>终止条件：确定递归何时结束的条件，以避免无限递归。</li>
</ul>
<h3 id="回流和重绘"><a href="#回流和重绘" class="headerlink" title="回流和重绘"></a>回流和重绘</h3><ul>
<li>回流：当渲染树中的一部分或全部，因为元素的规模尺寸，布局，隐藏等改变而需要重新构建，这就称为回流</li>
<li>重绘：当渲染树中的一些元素需要更新属性，而这些属性只是影响元素的外观，风格，而不会影响布局的，则称为重绘</li>
<li>两者的区别：回流必将引起重绘，而重绘不一定引起回流，比如：只有颜色改变的时候就只会发生重绘而不会引起回流，当页面布局和几何属性改变时就需要回流</li>
</ul>
<h3 id="ES6声明变量的六种方法"><a href="#ES6声明变量的六种方法" class="headerlink" title="ES6声明变量的六种方法"></a>ES6声明变量的六种方法</h3><ul>
<li>var，function，let，const，import，class</li>
</ul>
<h3 id="let与const以及var的区别？以及什么是暂时性死区？什么是变量提升？"><a href="#let与const以及var的区别？以及什么是暂时性死区？什么是变量提升？" class="headerlink" title="let与const以及var的区别？以及什么是暂时性死区？什么是变量提升？"></a>let与const以及var的区别？以及什么是暂时性死区？什么是变量提升？</h3><ul>
<li><p>var：预解析 变量提升 只提升变量名 不提升赋值，产生作用域</p>
</li>
<li><p>let 定义的变量不进行预解析，不进行变量提升，产生块级作用域{}</p>
</li>
<li><p>const 声明一个只读常量。一旦声明，常量的值就不能改变。产生块级作用域。(栈中的值)</p>
</li>
<li><p>暂时性死区</p>
<ul>
<li>使用 let 或 const 声明变量时，变量会被绑定到其所在的块级作用域。在变量被声明之前，它处于暂时性死区，即无法被访问。</li>
</ul>
</li>
<li><p>变量提升：先声明变量，再进行赋值</p>
</li>
</ul>
<h3 id="模板字符串"><a href="#模板字符串" class="headerlink" title="模板字符串"></a>模板字符串</h3><ul>
<li> 使用反引号创建的字符串就是模板字符串 ``</li>
<li>模板字符串中的内容允许直接换行</li>
<li>解决了字符串和变量之间使用+拼接的繁琐工作，可以直接使用${}来识别变量</li>
</ul>
<h3 id="Object-assign-有什么作用"><a href="#Object-assign-有什么作用" class="headerlink" title="Object.assign()有什么作用"></a>Object.assign()有什么作用</h3><ul>
<li><code>Object.assign()</code> 方法用于将一个或多个源对象的可枚举属性复制到目标对象。它返回目标对象。</li>
</ul>
<p>​    语法：<code>Object.assign(target, ...sources)</code></p>
<ul>
<li><code>target</code>：目标对象。</li>
<li><code>sources</code>：一个或多个源对象。</li>
</ul>
<h3 id="class类"><a href="#class类" class="headerlink" title="class类"></a>class类</h3><p>class类是JavaScript中用于创建对象的模板，它可以封装数据和方法，实现继承和多态。class类是在ES6中引入的，是基于原型的继承的语法糖。</p>
<h3 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h3><ul>
<li>普通函数表达式的简化语法</li>
<li>省略function关键字，在()和{}之间使用一个箭头连接</li>
<li>形参有且只有一个的时候，()也可以省略不写</li>
<li>当函数体中有且只有一条return语句时，可以省略{}及return关键字</li>
<li>有自己的this指向,会查找父级作用域的this</li>
<li>没有arguments实参的集合</li>
<li>因为为没有自己的this，所以不能作为构造函数使用</li>
</ul>
<h3 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h3><p>在ES6中允许按照一定的模式从数组或者对象中提取想要的数据</p>
<p>​     左右两边的结构必须保持一致</p>
<p>​     声明和赋值不能分开</p>
<p>​    将繁琐的数据进行简单化处理</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数组的结构赋值</span></span><br><span class="line"> <span class="keyword">var</span> arr = [<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;李四&quot;</span>, <span class="string">&quot;王五&quot;</span>]</span><br><span class="line"> <span class="keyword">var</span> [a, b, ...c] = arr</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">// 张三</span></span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(b) <span class="comment">// 李四</span></span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(c) <span class="comment">// Array(1) </span></span><br><span class="line"></span><br><span class="line"> <span class="comment">// 对象的结构赋值</span></span><br><span class="line"> <span class="comment">// 对象的属性名和解构的变量名一一对应</span></span><br><span class="line">   <span class="keyword">var</span> obj = &#123;</span><br><span class="line">     <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">     <span class="attr">age</span>: <span class="string">&quot;19&quot;</span>,</span><br><span class="line">     <span class="attr">job</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">       <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;web前端&quot;</span>)</span><br><span class="line">     &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">var</span> &#123; name, job,age &#125; = obj</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(name) <span class="comment">// 张三</span></span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(age)  <span class="comment">// 19</span></span><br><span class="line">   <span class="title function_">job</span>() <span class="comment">// web前端</span></span><br></pre></td></tr></table></figure></div>



<h3 id="扩展运算符（…）"><a href="#扩展运算符（…）" class="headerlink" title="扩展运算符（…）"></a>扩展运算符（…）</h3><p>…(剩余运算符)的作用</p>
<p>分配不了的都给它</p>
<p>当剩余运算符在函数的形参中使用时，只允许出现在最后一个形参前面，表示剩下所有传递的实参都保存在这个参数中，以数组形式展示</p>
<p>剩余运算符还可以作为展开数组的作用来使用，这时我们一般称之为开展运算符，或者扩展运算符，可以利用这种语法实现</p>
<p>例如：数组合并 ，伪数组转换为真数组 等使用场景</p>
<p>当我们需要将一个数组的每一个项作为实参的每一个值传递时，最简单的方式就是使用扩展运算符</p>
<div class="highlight-container" data-rel="Js"><figure class="iseeu highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="comment">// 使用扩展运算符合并</span></span><br><span class="line"><span class="keyword">var</span> arr4 = [...arr1,...arr2]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr4) <span class="comment">// [1, 2, 3, 4, 5, 6]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用扩展运算符找数组中最大值</span></span><br><span class="line"><span class="keyword">var</span> arr7 = [<span class="number">13</span>,<span class="number">21</span>,<span class="number">3</span>,<span class="number">3124</span>,<span class="number">32</span>,<span class="number">4532</span>,<span class="number">5</span>] </span><br><span class="line"><span class="keyword">let</span> maxNum = <span class="title class_">Math</span>.<span class="title function_">max</span>(...arr7)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(maxNum) <span class="comment">// 4532</span></span><br></pre></td></tr></table></figure></div>

<h3 id="Set和Map区别"><a href="#Set和Map区别" class="headerlink" title="Set和Map区别"></a>Set和Map区别</h3><ul>
<li>（1）Map是键值对的集合，类似于对象，Set是值的集合，类似于数组，<strong>当然键和值可以是任何的值</strong>；</li>
<li>（2）Map可以通过get方法获取值，而set不能因为它只有值；</li>
<li>（3）都能通过迭代器进行for…of遍历；</li>
<li>（4）Set的值是唯一的可以做数组去重，Map由于没有格式限制，可以做数据存储</li>
</ul>
<h3 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h3><ul>
<li>ES6引入一个全新的数据类型 Symbol该类型表示独一无二的值，类型的展现方式类似于字符串<ul>
<li>1） Symbol值是唯一的，那么可以解决命名冲突问题</li>
<li>2） Symbol值不能和其他任何数据进行计算</li>
<li>3） Symbol定义的对象属性不能使用for in进行遍历 =，Reflect.ownkeys来获取所有的键名</li>
<li>Symbol()表示创建一个独一无二的值</li>
<li>Symbol.for()表示创建一个独一无二的地址</li>
</ul>
</li>
</ul>
<h3 id="Proxy是什么，有什么作用"><a href="#Proxy是什么，有什么作用" class="headerlink" title="Proxy是什么，有什么作用"></a>Proxy是什么，有什么作用</h3><p>Proxy用于创建一个对象的代理，从而实现基本操作的拦截和自定义（属性查找，赋值，函数调用等），Proxy有两个参数分别是target和handler，target是代理的原始对象，handler是一个定义哪些操作将被拦截以及如何重新定义拦截操作的对象</p>
<h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><ul>
<li><p>Promise是ES6引入的异步编程的新解决方案，语法上Promise类似于一个构造函数，用来封装异步操作并可以获取成功或者失败的结果，专门用来解决回调地狱问题</p>
</li>
<li><p>在这个Promise的参数中传递的是一个回调函数，用来监听异步的结果，在这个回调函数中有两个参数，分贝时resolve和reject，这两个参数都是一个函数，分别代表成功和失败的回调参数，这两个参数调用时，都会返回到Promise调用一个Promise实例，该实例上有两个方法，分别是 then 和 catch，then方法对应的是resolve返回的实例，catch方法对应的是reject返回的实例</p>
</li>
<li><p>Promise.all()</p>
<p>   作用：并行操作异步处理，当我们需要同时发起多个异步请求时而且需要对请求的结果做处理，这时我们就要考虑使用all方法</p>
</li>
<li><p>三个状态：pending(进行中) 、fulfilled(成功)、rejected(失败)</p>
</li>
<li><p>特点</p>
<ul>
<li>1、对象状态不受外界影响</li>
<li>2、一旦状态改变，就不会再变，任何时候都可以得到这个结果</li>
</ul>
</li>
<li><p>缺点</p>
<ul>
<li>1、无法取消promise，一旦新建它就会立即执行，无法中途取消</li>
<li>2、如果不设置回调函数，promise内部抛出的错误，不会反应到外部</li>
<li>3、无法得知目前进展到哪一个阶段</li>
</ul>
</li>
</ul>
<h3 id="async和await是什么"><a href="#async和await是什么" class="headerlink" title="async和await是什么"></a>async和await是什么</h3><ul>
<li>async和await是新的一种处理异步操作的语法糖，它提供了一种更简介、更直观的方式来编写异步代码，并使异步操作的流程控制更类似于同步代码</li>
<li>async和await是建立在Promise的基础上的，它可以用于异步函数中，将函数标记为异步并允许在函数内部使用await关键字来等待promise对象的解决</li>
</ul>
<h3 id="async-await相比于Promise的优势？"><a href="#async-await相比于Promise的优势？" class="headerlink" title="async/await相比于Promise的优势？"></a>async/await相比于Promise的优势？</h3><ul>
<li>优势<ul>
<li>更类似于同步代码写法</li>
<li>可以使用try和catch语句来处理</li>
<li>处理复杂流程时代码更清晰</li>
</ul>
</li>
</ul>
<h3 id="同步与异步的区别"><a href="#同步与异步的区别" class="headerlink" title="同步与异步的区别"></a>同步与异步的区别</h3><p>同步：任务按照顺序执行，每个任务必须等待前一个任务完成之后才能开始执行，每个任务都会阻塞后续代码的执行，直到当前任务完成。</p>
<p>异步：任务可以同时进行，不需要等待前一个任务完成。当一个异步任务开始执行后，程序不会等待其完成，而是立即转而执行后续的代码。</p>
<h3 id="常用的HTTP状态码"><a href="#常用的HTTP状态码" class="headerlink" title="常用的HTTP状态码"></a>常用的HTTP状态码</h3><ul>
<li>1XX：接受请求正在处理</li>
<li>2XX：请求正常处理完毕</li>
<li>3XX：需要附加操作已完成请求</li>
<li>4XX：服务器无法处理请求（客户端错误）</li>
<li>5XX：服务器处理请求错误（服务器错误）</li>
</ul>
<p>200    请求成功</p>
<p>204    无内容</p>
<p>206    是对资源某一部分的请求</p>
<p>301    永久重定向</p>
<p>302    临时重定向</p>
<p>303    查看其他地址</p>
<p>400    错误请求</p>
<p>401    请求要求用户的身份认证</p>
<p>403    拒绝请求</p>
<p>404    未找到</p>
<p>500    服务器内部错误，无法完成请求</p>
<p>503    服务器暂时不可用</p>
<h3 id="px、em、rem、vh、vw分别是什么"><a href="#px、em、rem、vh、vw分别是什么" class="headerlink" title="px、em、rem、vh、vw分别是什么"></a>px、em、rem、vh、vw分别是什么</h3><p>px：绝对长度单位，不会随着浏览器页面大小改变</p>
<p>em：相对长度单位，继承父元素的font-size，比如某个元素字体大小为16px，那么1em就等于16px</p>
<p>rem：相对长度单位，rem是相对于HTML根元素的字体大小来计算长度单位，</p>
<p>vh：表示视窗的高度的百分比，1vh表示视窗高度的1%</p>
<p>vw：表示视窗的宽度，1vw就表示视窗宽度的1%</p>
<h3 id="vue路由传参的方式有哪些？如何接受传递的"><a href="#vue路由传参的方式有哪些？如何接受传递的" class="headerlink" title="vue路由传参的方式有哪些？如何接受传递的"></a>vue路由传参的方式有哪些？如何接受传递的</h3><ul>
<li>params 传参和 query 传参<ul>
<li>静态路由通过 params 传参，页面一旦刷新则数据会丢失 动态路由刷新不会丢失数据 而 query 传参 刷新页面不会丢失数据</li>
<li>params 传参类似于 post 请求传参，参数不会出现在 url 地址中，可以使用<code>this.$route.params.id</code>来接收参数</li>
<li>query 传参类似于 get 传参，数据会以查询字符串形式暴露在 url 地址栏中，可以使用<code>this.$route.query.id</code>来接收参数</li>
</ul>
</li>
</ul>
<h3 id="说说vuex的工作流程"><a href="#说说vuex的工作流程" class="headerlink" title="说说vuex的工作流程"></a>说说vuex的工作流程</h3><ul>
<li>在组件中通过dispatch调用actions中的方法，在actions的方法中通过commit调用mutations中的方法，在mutations中借助于mutate来修改state中的数据，在state中的数据可以通过rander函数在组件中进行响应式渲染</li>
</ul>
<h3 id="Vuex的五大核心"><a href="#Vuex的五大核心" class="headerlink" title="Vuex的五大核心"></a>Vuex的五大核心</h3><ul>
<li>state：存放共用数据</li>
<li>mutations：唯一可以修改state状态的地方，也是可以保存所有同步方法的地方</li>
<li>actions：用来使用mutations，修改state中的数据</li>
<li>getters：获取state里的数据，如果需要对数据进行计算可以使用</li>
<li>models：Vuex模块化管理，也可以用来写数据，模块中的state允许有重名数据出现，但是mutations及actions中不允许有重名的方法名出现</li>
</ul>
<h3 id="为什么v-if和v-for不建议用在同一标签"><a href="#为什么v-if和v-for不建议用在同一标签" class="headerlink" title="为什么v-if和v-for不建议用在同一标签"></a>为什么v-if和v-for不建议用在同一标签</h3><ul>
<li>1、性能损耗：v-for的优先级比v-if高，每次渲染都会先循环再进行条件判断</li>
<li>2、渲染结果：v-if会影响v-for的循环次数，导致列表渲染出错</li>
</ul>
<h3 id="什么是虚拟DOM，使用虚拟DOM的好处是"><a href="#什么是虚拟DOM，使用虚拟DOM的好处是" class="headerlink" title="什么是虚拟DOM，使用虚拟DOM的好处是?"></a>什么是虚拟DOM，使用虚拟DOM的好处是?</h3><ul>
<li>通过js创建一个Object对象来模拟真实DOM结构，这个对象包含标签名(tag)、属性(attrs)、和子元素对象(children)三个属性，通过vue中的render()函数把虚拟DOM编译成真实DOM，再通过appendChild()添加到页面中，Vue中的虚拟DOM最大的优势就是diff算法。减少JavaScript操作真实DOM带来的性能消耗</li>
</ul>
<h3 id="常见的Vue指令有哪些"><a href="#常见的Vue指令有哪些" class="headerlink" title="常见的Vue指令有哪些"></a>常见的Vue指令有哪些</h3><p>v-once：只会初始渲染一次数据，渲染完之后，该标签里面的数据不再进行响应式改变<br>v-html：可以解析数据中的HTML代码<br>v-text：不会解析HTMl代码，该标签内原有的内容会被替换掉<br>v-pre：不对具有v-pre属性的标签内容做解析<br>v-cloak：解决浏览器刷新时页面插值闪烁问题<br>v-bind：动态修改标签的属性<br>v-if：添加或删除元素，如果值为true 则表示添加元素 false表示删除<br>v-show：控制元素的显示与隐藏，<br>v-on：绑定事件 可以简写成@ 绑定的方法在methods中<br>v-for：列表渲染指令<br>  数据的类型：<br>  Array  数组<br>  Object 对象<br>  String 字符串<br>  Number 数字(必须是一个自然数，表示数组的长度)</p>
<h3 id="v-model原理是什么"><a href="#v-model原理是什么" class="headerlink" title="v-model原理是什么"></a>v-model原理是什么</h3><p>通过v-bind绑定输入框的value值实现数据改变输入框内容跟着改变，再通过v-on监听输入框的input事件，在事件函数中获取输入框的value来改变数据，从而达到双向绑定的实现，v-model就是这种实现的一个语法糖</p>
<h3 id="父传子数据"><a href="#父传子数据" class="headerlink" title="父传子数据"></a>父传子数据</h3><p>在父组件的子组件标签上自定义一个属性，属性值就是给子组件传递的数据</p>
<p>在子组件通过props属性来接收父组件传递过来的数据</p>
<p>在子组件内就可以使用传递的数据</p>
<h3 id="子传父数据"><a href="#子传父数据" class="headerlink" title="子传父数据"></a>子传父数据</h3><p>1、在子组件的事件函数中通过this.$emit()方法，向父组件发出一个自定义事件，同时携带数据<br>2、在父组件的子组件标签上通过v-on监听子组件发出的自定义事件，绑定一个事件触发函数<br>3、在父组件的事件触发函数中可以接收到一个参数，该参数就是子组件传递过来的数据</p>
<h3 id="vue中生命周期函数有哪些"><a href="#vue中生命周期函数有哪些" class="headerlink" title="vue中生命周期函数有哪些"></a>vue中生命周期函数有哪些</h3><p>Vue生命周期分为4个大的阶段<br>初始化、挂载、更新、销毁 触发八个生命周期函数<br>beforeCreate ：  初始化前<br>  vue实例开始准备加载data/methods….<br>created : 初始化后<br>  vue已经加载完data/methods….<br>  进行网络请求，拿到页面数据<br>beforeMount ： 挂载前<br>  将vue实例挂载到某个DOM元素前<br>mounted ： 挂载后<br>   将vue实例挂载某个DOM元素完成,这时才可以对DOM进行操作<br>beforeUpdate ： 更新前<br>updated ： 更新后<br>beforeDestroy ： 销毁前<br>destroyed ： 销毁后</p>
<h3 id="路由的导航守卫"><a href="#路由的导航守卫" class="headerlink" title="路由的导航守卫"></a>路由的导航守卫</h3><p>全局前置守卫 router.beforeEach()<br>全局后置守卫 router.afterEach()<br>全局解析守卫 router.beforeResolve()<br>路由独享守卫 beforeEnter:(to,from,next)=&gt;{}<br>beforeRouteEnter:()=&gt;{} 对访问用户进行权限校验<br>beforeRouteUpdate:()=&gt;{} 一般在动态路由的路径发生改变时，需要执行的操作<br>beforeRouterLeave:()=&gt;{} 通常情况下是为了预防用户还未保存前离开</p>
]]></content>
      <categories>
        <category>javascript</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6(未总结完)</title>
    <url>/2023/06/02/ES6/</url>
    <content><![CDATA[<p><strong>ES6声明变量的六种方法</strong></p>
<p>var，function，let，const，import，class</p>
<p><strong>let,var,const 区别</strong></p>
<p>var：预解析 变量提升 只提升变量名 不提升赋值，产生作用域</p>
<p>let 定义的变量不进行预解析，不进行变量提升，产生块级作用域{}</p>
<p>const 声明一个只读常量。一旦声明，常量的值就不能改变。(栈中的值)</p>
<p><strong>箭头函数</strong></p>
<p>​    1. 省略function关键字，在()和{}之间使用一个箭头连接</p>
<p>​    2. 当形参有且只有一个的时候，()也可以省略不写</p>
<span id="more"></span>

<p>​    3. 当函数体中有且只有一条return语句时，可以省略{}及return关键字</p>
<p>​    4. 没有自己的this指向,会查找父级作用域的this</p>
<p>​    5. 没有arguments实参的集合</p>
<ol start="6">
<li><p>因为没有自己的this，所以不能作为构造函数使用</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// arguments</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fn8</span>(<span class="params"></span>)&#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>) <span class="comment">// Arguments(8) [1, 2, 3, 4, 5, 6, 7, 8, callee: ƒ, Symbol(Symbol.iterator): ƒ]</span></span><br><span class="line">   <span class="keyword">var</span> sum = <span class="number">0</span></span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">var</span>  i = <span class="number">0</span> ; i &lt; <span class="variable language_">arguments</span>.<span class="property">length</span> ; i++)&#123;</span><br><span class="line">​    sum += <span class="variable language_">arguments</span>[i]</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> sum</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fn8</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>)) <span class="comment">// 结果是36</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 箭头函数没有arguments实参的集合</span></span><br><span class="line">  <span class="keyword">var</span> <span class="title function_">fn9</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>) <span class="comment">// arguments is not defined</span></span><br><span class="line">   <span class="keyword">var</span> sum = <span class="number">0</span></span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">var</span>  i = <span class="number">0</span> ; i &lt; <span class="variable language_">arguments</span>.<span class="property">length</span> ; i++)&#123;</span><br><span class="line">​    sum += <span class="variable language_">arguments</span>[i]</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> sum</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">fn9</span>(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>))</span><br></pre></td></tr></table></figure></div></li>
</ol>
<p><strong>剩余运算符（扩展运算符）…</strong></p>
<p>…(剩余运算符)的作用</p>
<p>分配不了的都给它</p>
<p>当剩余运算符在函数的形参中使用时，只允许出现在最后一个形参前面，表示剩下所有传递的实参都保存在这个参数中，以数组形式展示</p>
<p>剩余运算符还可以作为展开数组的作用来使用，这时我们一般称之为开展运算符，或者扩展运算符，可以利用这种语法实现</p>
<p>例如：数组合并 ，伪数组转换为真数组 等使用场景</p>
<p>当我们需要将一个数组的每一个项作为实参的每一个值传递时，最简单的方式就是使用扩展运算符</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line"><span class="keyword">var</span> arr2 = [<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>]</span><br><span class="line"><span class="keyword">var</span> arr3 = arr1.<span class="title function_">concat</span>(arr2) <span class="comment">// 合并数组</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr3) <span class="comment">// [1, 2, 3, 4, 5, 6]</span></span><br><span class="line"><span class="comment">// 使用扩展运算符合并</span></span><br><span class="line"><span class="keyword">var</span> arr4 = [...arr1,...arr2]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr4) <span class="comment">// [1, 2, 3, 4, 5, 6]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用扩展运算符找数组中最大值</span></span><br><span class="line"><span class="keyword">var</span> arr7 = [<span class="number">13</span>,<span class="number">21</span>,<span class="number">3</span>,<span class="number">3124</span>,<span class="number">32</span>,<span class="number">4532</span>,<span class="number">5</span>] </span><br><span class="line"><span class="keyword">let</span> maxNum = <span class="title class_">Math</span>.<span class="title function_">max</span>(...arr7)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(maxNum) <span class="comment">// 4532</span></span><br></pre></td></tr></table></figure></div>

<p><strong>模板字符串</strong></p>
<p>   使用反引号创建的字符串就是模板字符串 ``</p>
<p>​    * 模板字符串中的内容允许直接换行</p>
<p>​    * 解决了字符串和变量之间使用+拼接的繁琐工作，可以直接使用${}来识别变量</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;hello  word&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> str1 = <span class="string">`hello </span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">  </span></span><br><span class="line"><span class="string">  word`</span></span><br></pre></td></tr></table></figure></div>

<p><strong>结构赋值</strong></p>
<p>在ES6中允许按照一定的模式从数组或者对象中提取想要的数据</p>
<p>左右两边的结构必须保持一致</p>
<p>声明和赋值不能分开</p>
<p>将繁琐的数据进行简单化处理</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 数组的结构赋值</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">&quot;张三&quot;</span>, <span class="string">&quot;李四&quot;</span>, <span class="string">&quot;王五&quot;</span>]</span><br><span class="line"><span class="keyword">var</span> [a, b, ...c] = arr</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a) <span class="comment">// 张三</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b) <span class="comment">// 李四</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c) <span class="comment">// Array(1) </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象的结构赋值</span></span><br><span class="line"><span class="comment">// 对象的属性名和解构的变量名一一对应</span></span><br><span class="line">  <span class="keyword">var</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;张三&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="string">&quot;19&quot;</span>,</span><br><span class="line">    <span class="attr">job</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;web前端&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> &#123; name, job,age &#125; = obj</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(name) <span class="comment">// 张三</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(age)  <span class="comment">// 19</span></span><br><span class="line">  <span class="title function_">job</span>() <span class="comment">// web前端</span></span><br></pre></td></tr></table></figure></div>



<p><strong>Symbol数据类型</strong></p>
<p>​    ES6引入一个全新的数据类型 Symbol该类型表示独一无二的值，类型的展现方式类似于字符串</p>
<p>​     特点：</p>
<p>​      1） Symbol值是唯一的，那么可以解决命名冲突问题</p>
<p>​      2） Symbol值不能和其他任何数据进行计算</p>
<p>​      3） Symbol定义的对象属性不能使用for in进行遍历 =，Reflect.ownkeys来获取所有的键名</p>
<p>​    Symbol()表示创建一个独一无二的值</p>
<p>​    Symbol.for()表示创建一个独一无二的地址</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">	</span><br><span class="line"><span class="comment">// Symbol()表示创建一个独一无二的值</span></span><br><span class="line"><span class="comment">// Symbol.for()表示创建一个独一无二的地址</span></span><br><span class="line"><span class="keyword">var</span> s1 = <span class="title class_">Symbol</span>()</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s1) <span class="comment">// Symbol()</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> s1) <span class="comment">//验证是symbol类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span>  s2 = <span class="title class_">Symbol</span>(<span class="string">&quot;北工商&quot;</span>) </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s2) <span class="comment">// Symbol(北工商)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s3 = <span class="title class_">Symbol</span>(<span class="string">&quot;北工商&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s2==s3) <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s4 = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&quot;北工商&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s4) <span class="comment">//Symbol(北工商)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> s4) <span class="comment">//symbol</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s2==s4) <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s5 = <span class="title class_">Symbol</span>.<span class="title function_">for</span>(<span class="string">&quot;北工商&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s5==s4) <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s4.<span class="property">name</span>) <span class="comment">// undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s5.<span class="property">name</span>) <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure></div>

<p><strong>迭代器（iterator）</strong></p>
<p>​    迭代器就是一个接口，为各种不同的数据结构提供一种统一的访问机制，任何数据结构只要部署了iterator结构，那么就可以完成访问操作</p>
<p>​    在ES6创造了一种全新的遍历命令，for of，只要有iterator结构数据结构就可以使用for of进行遍历操作</p>
<ul>
<li>Array</li>
<li>Map</li>
<li>Set</li>
<li>String</li>
<li>TypedArray</li>
<li>函数的 arguments 对象</li>
<li>NodeList 对象</li>
</ul>
<p>​    默认情况下 for of 是无法遍历对象的，因为对象的原型上没有部署iterator接口</p>
<p>   * 工作原理</p>
<p>​    1. 创建一个指针对象，指向当前数据的起始位置</p>
<p>​    2. 第一次调用对象的next()方法，指针会自动指向该数据的下一个成员</p>
<p>​    3. 接下来就是不断地调用next()方法，指针一直向后移动，一直到移动到最后一个成员</p>
<p>​    4. 每一次调用next()方法时，会返回一个包含value和done两个属性的对象，其中value表示指针指向的数据，done表示是否完成</p>
<p>​    5. 当执行到value的值为undefined时候，done的值就会变成true，当done值为true时，next()调用就会终止</p>
<p>   * 使用场景</p>
<p>​     当我们需要在自定义遍历数据的时候，我们想到的就是迭代器</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">String</span>.<span class="property"><span class="keyword">prototype</span></span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>)</span><br><span class="line"></span><br><span class="line"> <span class="keyword">var</span>  str = <span class="string">&quot;hello world&quot;</span></span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">var</span> item <span class="keyword">of</span> str)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item)</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">var</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>:<span class="string">&quot;张三&quot;</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment">// for(var item of obj)&#123;</span></span><br><span class="line"> <span class="comment">//  console.log(item)</span></span><br><span class="line"> <span class="comment">// &#125;</span></span><br><span class="line"> <span class="comment">//  obj is not iterable  Object没有iterable方法</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">var</span> arr = [<span class="string">&quot;独行月球&quot;</span>,<span class="string">&quot;疯狂外星人&quot;</span>,<span class="string">&quot;疯狂的石头&quot;</span>,<span class="string">&quot;疯狂原始人&quot;</span>]</span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">var</span> item <span class="keyword">of</span> arr)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(item)</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">var</span> it = arr[<span class="title class_">Symbol</span>.<span class="property">iterator</span>]()</span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(it) <span class="comment">// Array Iterator &#123;&#125;</span></span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(it.<span class="title function_">next</span>()) <span class="comment">//&#123;value: &#x27;独行月球&#x27;, done: false&#125;</span></span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(it.<span class="title function_">next</span>()) <span class="comment">//&#123;value: &#x27;疯狂外星人&#x27;, done: false&#125;</span></span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(it.<span class="title function_">next</span>()) <span class="comment">//&#123;value: &#x27;疯狂的石头&#x27;, done: false&#125;</span></span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(it.<span class="title function_">next</span>()) <span class="comment">//&#123;value: &#x27;疯狂原始人&#x27;, done: false&#125;</span></span><br><span class="line"> <span class="variable language_">console</span>.<span class="title function_">log</span>(it.<span class="title function_">next</span>()) <span class="comment">//&#123;value: undefined, done: true&#125;</span></span><br></pre></td></tr></table></figure></div>

<p><strong>Promise</strong></p>
<p> Promise是ES6引入的异步编程的新解决方案，语法上Promise类似于一个构造函数，用来封装异步操作并可以获取成功或者失败的结果，专门用来解决回调地狱问题</p>
<p> 在Promise的参数中传递的是一个回调函数，用来监听异步的结果，在这个回调函数中有两个参数，分别是resolve，reject </p>
<p> resolve和reject 两个参数都是一个函数，分别表示成功和失败的回调参数</p>
<p> 这两个参数调用时都会返回到Promise调用处一个Promise实例，该实例上有两个方法，分别是then 和 catch</p>
<p>  then方法对应的是resolve返回的实例</p>
<p>  catch方法对应的是reject返回的实例</p>
<p>  then方法中可以接收两个参数，第一个参数是成功的回调，第二个参数则是失败的回调，</p>
<p>  也就是说如果我们不想写catch 那么可以将catch的内容写在then方法的第二个参数中</p>
<p>  <strong>Promise.all()</strong></p>
<p>   作用：并行操作异步处理，当我们需要同时发起多个异步请求时而且需要对请求的结果做处理，这时我们就要考虑使用all方法</p>
<p>  <strong>Promise有三个状态</strong></p>
<p>   初始态：pending</p>
<p>   在Promise中没有执行resolve 或者 reject的状态</p>
<p>   成功态：fulfilled</p>
<p>   失败态：rejected</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">1</span></span><br><span class="line">  <span class="keyword">var</span> p = <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve,reject</span>)&#123;</span><br><span class="line">   <span class="comment">// if(num &lt; 2)&#123;</span></span><br><span class="line">   <span class="comment">//  resolve(&#x27;成功&#x27;)</span></span><br><span class="line">   <span class="comment">// &#125;else&#123;</span></span><br><span class="line">   <span class="comment">//  reject(&#x27;失败&#x27;)</span></span><br><span class="line">   <span class="comment">// &#125;</span></span><br><span class="line">      </span><br><span class="line">   <span class="comment">// 写一些异步操作</span></span><br><span class="line">​    <span class="built_in">setTimeout</span>(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">​     <span class="keyword">var</span> data = <span class="string">&quot;请求到的数据&quot;</span></span><br><span class="line">​     <span class="title function_">resolve</span>(data)</span><br><span class="line">​     <span class="title function_">reject</span>(<span class="string">&quot;err&quot;</span>)</span><br><span class="line">​    &#125;,<span class="number">2000</span>)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  p.<span class="title function_">catch</span>(<span class="function"><span class="params">err</span>=&gt;</span>&#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(err)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  p.<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(res)</span><br><span class="line">  &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(p)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>)</span><br></pre></td></tr></table></figure></div>

<p><strong>集合：Map Set</strong> </p>
<p>   ES6提供了新的数据结构Set，类似于数组，但是具有成员唯一性的特性</p>
<p>   访问Set集合中的数据可以使用 for of 遍历来访问</p>
<p>**Set主要的应用场景在于 数据重组  **</p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// size返回集合元素的个数</span></span><br><span class="line"><span class="comment">// add() ：为当前集合新增一个新的成员,返回当前集合</span></span><br><span class="line"><span class="comment">// delete() : 为当前集合删除一个指定成员,返回boolean值</span></span><br><span class="line"><span class="comment">// clear() : 清空集合,返回undefined</span></span><br><span class="line"><span class="comment">// hsa() : 检测集合中是否存在某个成员，返回Boolean类型的</span></span><br><span class="line"><span class="keyword">var</span> s1 = <span class="keyword">new</span> <span class="title class_">Set</span>([<span class="string">&quot;111&quot;</span>,<span class="string">&quot;222&quot;</span>,<span class="string">&quot;333&quot;</span>,<span class="string">&quot;111&quot;</span>])</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(s1) <span class="comment">// Set(3) &#123;&#x27;111&#x27;, &#x27;222&#x27;, &#x27;333&#x27;&#125;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(s1.<span class="property">size</span>) <span class="comment">// 3</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> item <span class="keyword">of</span> s1)&#123;</span><br><span class="line">   <span class="variable language_">console</span>.<span class="title function_">log</span>(item) <span class="comment">// 111 222 333 </span></span><br><span class="line">  &#125;</span><br><span class="line">  s1.<span class="title function_">add</span>(<span class="string">&quot;444&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(s1) <span class="comment">// Set(4) &#123;&#x27;111&#x27;, &#x27;222&#x27;, &#x27;333&#x27;, &#x27;444&#x27;&#125;</span></span><br><span class="line">  s1.<span class="title function_">delete</span>(<span class="string">&quot;222&quot;</span>) <span class="comment">// Set(3) &#123;&#x27;111&#x27;, &#x27;333&#x27;, &#x27;444&#x27;&#125;</span></span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(s1)</span><br><span class="line">  s1.<span class="title function_">clear</span>() </span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(s1) <span class="comment">// Set(0) &#123;size: 0&#125;</span></span><br><span class="line">  <span class="keyword">var</span> boo = s1.<span class="title function_">has</span>(<span class="string">&quot;444&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(boo) <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// Set的值是唯一的 不可以重复且自动排序</span></span><br><span class="line">  <span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">65</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">8</span>]</span><br><span class="line">  <span class="keyword">var</span> s2 = <span class="keyword">new</span> <span class="title class_">Set</span>(arr)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(s2) <span class="comment">// Set(6) &#123;1, 2, 4, 65, 7, …&#125;</span></span><br><span class="line">  <span class="keyword">var</span> arr2 = [...s2]</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(arr2) <span class="comment">// (6) [1, 2, 4, 65, 7, 8]</span></span><br></pre></td></tr></table></figure></div>

<p> <strong>Map 主要的应用场景在于数据储存</strong></p>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Map: </span></span><br><span class="line"><span class="comment">// ES6提出的心的数据结构，类似于对象，也是键值对的集合</span></span><br><span class="line"><span class="comment">// set() ：为集合添加新的成员，返回添加后的集合</span></span><br><span class="line"><span class="comment">// get() : 获取对应键名的值</span></span><br><span class="line"><span class="comment">// has() : 判断集合中是否存在某个成员 返回 boolean 值</span></span><br><span class="line"><span class="comment">// size() ：返回 Map 的元素个数</span></span><br><span class="line"><span class="comment">// clear() : 清空集合，返回 undefined</span></span><br><span class="line"><span class="comment">// delete(): 通过键值从Map中移除对应的数据</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> m1 = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">  m1.<span class="title function_">set</span>(<span class="string">&#x27;name&#x27;</span>,<span class="string">&quot;张三&quot;</span>)</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(m1) </span><br><span class="line">  <span class="comment">// Map(1) &#123;&#x27;name&#x27; =&gt; &#x27;张三&#x27;&#125;</span></span><br><span class="line">  <span class="comment">// key: &quot;name&quot;</span></span><br><span class="line">  <span class="comment">// value: &quot;张三&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="keyword">var</span> m1 = <span class="keyword">new</span> <span class="title class_">Map</span>()</span><br><span class="line">    m1.<span class="title function_">set</span>(<span class="string">&#x27;name&#x27;</span>,<span class="string">&quot;张三&quot;</span>)</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(m1)</span><br><span class="line">		<span class="comment">// Map(1) &#123;&#x27;name&#x27; =&gt; &#x27;张三&#x27;&#125;</span></span><br><span class="line">  		<span class="comment">// key: &quot;name&quot;</span></span><br><span class="line">  		<span class="comment">// value: &quot;张三&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> key = &#123;</span><br><span class="line">      <span class="attr">school</span>:<span class="string">&quot;北工商&quot;</span>,</span><br><span class="line">    &#125;</span><br><span class="line">    m1.<span class="title function_">set</span>(key,[<span class="string">&#x27;北京&#x27;</span>,<span class="string">&quot;上海&quot;</span>])</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(m1)</span><br><span class="line">	<span class="comment">//对象相同的键连续赋值，后一次的值会覆盖前一次的值</span></span><br><span class="line">	<span class="comment">//注意:只有对同一个对象的引用，Map结构才将其视为同一个键，引用数据类型必须内存地址一样，才可能是同一个键</span></span><br><span class="line">		<span class="comment">// 0: &#123;&quot;name&quot; =&gt; &quot;张三&quot;&#125;</span></span><br><span class="line">		<span class="comment">// key: &quot;name&quot;</span></span><br><span class="line">  		<span class="comment">// value: &quot;张三&quot;</span></span><br><span class="line">        <span class="comment">// 1: &#123;Object =&gt; Array(2)&#125;</span></span><br><span class="line">		<span class="comment">// key: &#123;school: &#x27;北工商&#x27;&#125;</span></span><br><span class="line">  		<span class="comment">// value: (2) [&#x27;北京&#x27;, &#x27;上海&#x27;]</span></span><br><span class="line"></span><br><span class="line">    m1.<span class="title function_">set</span>([<span class="string">&quot;name1&quot;</span>,<span class="string">&quot;李四&quot;</span>])</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(m1)</span><br><span class="line">	<span class="comment">// 如果读取一个未知的键，则返回undefined</span></span><br><span class="line">		<span class="comment">// 0: &#123;&quot;name&quot; =&gt; &quot;张三&quot;&#125;</span></span><br><span class="line">		<span class="comment">// key: &quot;name&quot;</span></span><br><span class="line">  		<span class="comment">// value: &quot;张三&quot;</span></span><br><span class="line">        <span class="comment">// 1: &#123;Object =&gt; Array(2)&#125;</span></span><br><span class="line">		<span class="comment">// key: &#123;school: &#x27;北工商&#x27;&#125;</span></span><br><span class="line">  		<span class="comment">// value: (2) [&#x27;北京&#x27;, &#x27;上海&#x27;]</span></span><br><span class="line">		<span class="comment">// 2: &#123;Array(2) =&gt; undefined&#125;</span></span><br><span class="line">		<span class="comment">// key: (2) [&#x27;name1&#x27;, &#x27;李四&#x27;]</span></span><br><span class="line">		<span class="comment">// value: undefined</span></span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>ES6</category>
      </categories>
      <tags>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>回流与重绘</title>
    <url>/2022/11/15/ReflowandRepaint/</url>
    <content><![CDATA[<hr>
<p><strong>在回流和重绘之前先来了解一下的浏览器的渲染过程</strong></p>
<ol>
<li><strong>解析HTML文件</strong>，构建DOM树（Document Object Model），表示页面的结构和内容。</li>
<li><strong>解析CSS文件</strong>，构建CSSOM树（CSS Object Model），表示页面的样式和布局。</li>
<li><strong>合并DOM树和CSSOM树</strong>，生成渲染树（Render Tree），表示页面的可见元素和属性。</li>
<li><strong>布局渲染树</strong>，计算每个元素的位置和大小，生成布局（Layout）。</li>
<li><strong>绘制渲染树</strong>，将每个元素绘制到屏幕上，生成像素（Paint）。</li>
<li><strong>合成图层</strong>，将多个图层合并为一张位图，显示在屏幕上（Composite）。</li>
</ol>
<p>在这个过程中，还可能涉及到<strong>加载图片等资源文件</strong>和<strong>执行解析js文件脚本代码</strong>等操作，这些操作可能会影响DOM树、CSSOM树或渲染树的更新，从而触发重排（Reflow）或重绘（Repaint）。</p>
<span id="more"></span>

<p>Reflow（回流)：在render树的基础上进行布局, 计算每个节点的大小和位置。</p>
<p>Repaint（重绘）：根据渲染树以及回流得到的几何信息，把每个节点绘制在屏幕上。</p>
<p><strong>什么是回流</strong></p>
<p>当render树中的一部分元素的规模尺寸，布局，隐藏等改变而需要重新构建，这就称为回流(reflow)。每个页面至少需要一次回流，就是在页面第一次加载的时候。在回流的时候，浏览器会使渲染树中受到影响的部分失效，并重新构造这部分渲染树，完成回流后，浏览器会重新绘制受到影响的部分到屏幕中，此过程叫重绘。因此回流必然会引起重绘。</p>
<p><strong>什么是重绘</strong></p>
<p>当render树中的一些元素的某些属性发生改变时，而这些属性只是影响元素的外观，风格，而不会影响布局，比如background-color。这就称为重绘（repaint）。重绘不一定会引起回流。</p>
<p><strong>区别</strong></p>
<p>回流必将引起重绘，而重绘不一定会引起回流。</p>
<p>比如：只有颜色改变的时候就只会发生重绘而不会引起回流，而当页面布局和几何属性改变时就需要回流。display:none 会触发 reflow，而 visibility:hidden 只会触发 repaint，因为没有发生位置变化。</p>
<p>所以我们能得知回流的成本要高于重绘，回流的花销跟render树有多少节点需要重新构建有关系。</p>
<p>下面这些原因会引起浏览器的回流：<br>调整窗口大小，改变字体大小，CSS伪类激活（在用户交互过程中发生），添加或者删除可见的DOM元素，元素位置改变，元素尺寸改变——边距、填充、边框、宽度和高度，内容改变等。</p>
<h2 id="如何减少回流和重绘"><a href="#如何减少回流和重绘" class="headerlink" title="如何减少回流和重绘"></a>如何减少回流和重绘</h2><p>1.浏览器中的优化机制</p>
<p>浏览器会维护一个队列，队列中存放的是会触发回流和重绘的操作，当队列中的操作达到一定阀值或者到了一定的时间间隔时，浏览器就会清空队列，进行一个批处理。这样就会让多次的回流、重绘变成一次回流重绘。但是！当你获取元素大小和位置等布局信息的时候，比如当你访问offsetTop、scrollTop、clientTop这些属性或者使用getComputedStyle()、getBoundingClientRect（）等方法的时候，为了保证准确（得到最新的布局信息），队列会被强制清空，触发回流重绘来返回正确的值。因此，要注意这一类操作的使用！如果要使用它们，最好将值缓存起来。</p>
<p>2.自己进行优化</p>
<p>核心在于减少Repaint和Reflow的次数</p>
<p>Repaint和Reflow是不可避免的，只能说对性能的影响减到最小，给出下面几条建议：</p>
<ol>
<li>改变样式的时候，避免逐条更改样式，而是集中修改样式，例如操作className或使用cssText。</li>
<li>避免频繁读取元素几何属性（例如scrollTop）。</li>
<li>使用定位让元素脱离文档流。</li>
<li>开启css3硬件加速。</li>
<li>可以通过批量修改dom元素的方式达到减少回流和重绘的目的，具体有以下三种方式： </li>
</ol>
<ul>
<li>在设置display:none;的元素上操作，最后显示出来</li>
<li>使用文档片段(document fragment)，在当前DOM外构建一个子树，在它上面应用所有DOM操作，再把它拷贝回文档。</li>
<li>将原始元素拷贝到一个脱离文档的节点中，修改节点后，再替换原始的元素。</li>
</ul>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
</search>
